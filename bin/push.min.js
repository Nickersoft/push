/**
 * @license
 *
 * Push v1.0.9
 * =========
 * A compact, cross-browser solution for the JavaScript Notifications API
 *
 * Credits
 * -------
 * Tsvetan Tsvetkov (ttsvetko)
 * Alex Gibson (alexgibson)
 *
 * License
 * -------
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2017 Tyler Nickerson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
<<<<<<< HEAD
!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?module.exports=o(require("@push/core")):"function"==typeof define&&define.amd?define(["@push/core"],o):(e=e||self).Push=o(e.core)}(this,function(e){"use strict";return new e.Push("undefined"!=typeof window?window:global)});
=======
!(function(i, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = t())
    : 'function' == typeof define && define.amd
      ? define(t)
      : (i.Push = t());
})(this, function() {
  'use strict';
  function i(t) {
    return (i =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function(i) {
            return typeof i;
          }
        : function(i) {
            return i &&
              'function' == typeof Symbol &&
              i.constructor === Symbol &&
              i !== Symbol.prototype
              ? 'symbol'
              : typeof i;
          })(t);
  }
  function t(i, t) {
    if (!(i instanceof t))
      throw new TypeError('Cannot call a class as a function');
  }
  function n(i, t) {
    for (var n = 0; n < t.length; n++) {
      var e = t[n];
      (e.enumerable = e.enumerable || !1),
        (e.configurable = !0),
        'value' in e && (e.writable = !0),
        Object.defineProperty(i, e.key, e);
    }
  }
  function e(i, t, e) {
    return t && n(i.prototype, t), e && n(i, e), i;
  }
  function o(i, t, n) {
    return (
      t in i
        ? Object.defineProperty(i, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
          })
        : (i[t] = n),
      i
    );
  }
  function r(i, t) {
    if ('function' != typeof t && null !== t)
      throw new TypeError('Super expression must either be null or a function');
    (i.prototype = Object.create(t && t.prototype, {
      constructor: { value: i, writable: !0, configurable: !0 }
    })),
      t && c(i, t);
  }
  function s(i) {
    return (s = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function(i) {
          return i.__proto__ || Object.getPrototypeOf(i);
        })(i);
  }
  function c(i, t) {
    return (c =
      Object.setPrototypeOf ||
      function(i, t) {
        return (i.__proto__ = t), i;
      })(i, t);
  }
  function a(i, t) {
    return !t || ('object' != typeof t && 'function' != typeof t)
      ? (function(i) {
          if (void 0 === i)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return i;
        })(i)
      : t;
  }
  var u = {
      errors: {
        incompatible: ''.concat(
          'PushError:',
          ' Push.js is incompatible with browser.'
        ),
        invalid_plugin: ''.concat(
          'PushError:',
          ' plugin class missing from plugin manifest (invalid plugin). Please check the documentation.'
        ),
        invalid_title: ''.concat(
          'PushError:',
          ' title of notification must be a string'
        ),
        permission_denied: ''.concat(
          'PushError:',
          ' permission request declined'
        ),
        sw_notification_error: ''.concat(
          'PushError:',
          ' could not show a ServiceWorker notification due to the following reason: '
        ),
        sw_registration_error: ''.concat(
          'PushError:',
          ' could not register the ServiceWorker due to the following reason: '
        ),
        unknown_interface: ''.concat(
          'PushError:',
          ' unable to create notification: unknown interface'
        )
      }
    },
    f = (function() {
      function i(n) {
        t(this, i),
          (this.win = n),
          (this.GRANTED = 'granted'),
          (this.DEFAULT = 'default'),
          (this.DENIED = 'denied'),
          (this.permissions = [this.GRANTED, this.DEFAULT, this.DENIED]);
      }
      return (
        e(i, [
          {
            key: 'request',
            value: function(i, t) {
              return arguments.length > 0
                ? this.requestWithCallback(i, t)
                : this._requestAsPromise();
            }
          },
          {
            key: 'requestWithCallback',
            value: function(i, t) {
              var n = this,
                e = this.get(),
                o = function() {
                  var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : n.win.Notification.permission;
                  void 0 === e &&
                    n.win.webkitNotifications &&
                    (e = n.win.webkitNotifications.checkPermission()),
                    e === n.GRANTED || e === n.GRANTED ? i && i() : t && t();
                };
              e !== this.DEFAULT
                ? o(e)
                : this.win.webkitNotifications &&
                  this.win.webkitNotifications.checkPermission
                  ? this.win.webkitNotifications.requestPermission(o)
                  : this.win.Notification &&
                    this.win.Notification.requestPermission
                    ? this.win.Notification.requestPermission()
                        .then(o)
                        .catch(function() {
                          t && t();
                        })
                    : i && i();
            }
          },
          {
            key: '_requestAsPromise',
            value: function() {
              var i = this,
                t = this.get(),
                n = t !== this.DEFAULT,
                e =
                  this.win.Notification &&
                  this.win.Notification.requestPermission,
                o =
                  this.win.webkitNotifications &&
                  this.win.webkitNotifications.checkPermission;
              return new Promise(function(r, s) {
                var c = function(t) {
                  return (function(t) {
                    return t === i.GRANTED || 0 === t;
                  })(t)
                    ? r()
                    : s();
                };
                n
                  ? c(t)
                  : o
                    ? i.win.webkitNotifications.requestPermission(function(i) {
                        c(i);
                      })
                    : e
                      ? i.win.Notification.requestPermission()
                          .then(function(i) {
                            c(i);
                          })
                          .catch(s)
                      : r();
              });
            }
          },
          {
            key: 'has',
            value: function() {
              return this.get() === this.GRANTED;
            }
          },
          {
            key: 'get',
            value: function() {
              return this.win.Notification && this.win.Notification.permission
                ? this.win.Notification.permission
                : this.win.webkitNotifications &&
                  this.win.webkitNotifications.checkPermission
                  ? this.permissions[
                      this.win.webkitNotifications.checkPermission()
                    ]
                  : navigator.mozNotification
                    ? this.GRANTED
                    : this.win.external && this.win.external.msIsSiteMode
                      ? this.win.external.msIsSiteMode()
                        ? this.GRANTED
                        : this.DEFAULT
                      : this.GRANTED;
            }
          }
        ]),
        i
      );
    })(),
    l = (function() {
      function n() {
        t(this, n);
      }
      return (
        e(n, null, [
          {
            key: 'isUndefined',
            value: function(i) {
              return void 0 === i;
            }
          },
          {
            key: 'isString',
            value: function(i) {
              return 'string' == typeof i;
            }
          },
          {
            key: 'isFunction',
            value: function(i) {
              return i && '[object Function]' === {}.toString.call(i);
            }
          },
          {
            key: 'isObject',
            value: function(t) {
              return 'object' === i(t);
            }
          },
          {
            key: 'objectMerge',
            value: function(i, t) {
              for (var n in t)
                i.hasOwnProperty(n) &&
                this.isObject(i[n]) &&
                this.isObject(t[n])
                  ? this.objectMerge(i[n], t[n])
                  : (i[n] = t[n]);
            }
          }
        ]),
        n
      );
    })(),
    h = function i(n) {
      t(this, i), (this.win = n);
    },
    v = (function(i) {
      function n() {
        return t(this, n), a(this, s(n).apply(this, arguments));
      }
      return (
        r(n, h),
        e(n, [
          {
            key: 'isSupported',
            value: function() {
              return void 0 !== this.win.Notification;
            }
          },
          {
            key: 'create',
            value: function(i, t) {
              return new this.win.Notification(i, {
                icon:
                  l.isString(t.icon) || l.isUndefined(t.icon)
                    ? t.icon
                    : t.icon.x32,
                body: t.body,
                tag: t.tag,
                requireInteraction: t.requireInteraction
              });
            }
          },
          {
            key: 'close',
            value: function(i) {
              i.close();
            }
          }
        ]),
        n
      );
    })(),
    d = (function(i) {
      function n() {
        return t(this, n), a(this, s(n).apply(this, arguments));
      }
      return (
        r(n, h),
        e(n, [
          {
            key: 'isSupported',
            value: function() {
              return (
                void 0 !== this.win.navigator &&
                void 0 !== this.win.navigator.serviceWorker
              );
            }
          },
          {
            key: 'getFunctionBody',
            value: function(i) {
              var t = i.toString().match(/function[^{]+{([\s\S]*)}$/);
              return void 0 !== t && null !== t && t.length > 1 ? t[1] : null;
            }
          },
          {
            key: 'create',
            value: function(i, t, n, e, r) {
              var s = this;
              this.win.navigator.serviceWorker.register(e),
                this.win.navigator.serviceWorker.ready
                  .then(function(e) {
                    var c = {
                      id: i,
                      link: n.link,
                      origin: document.location.href,
                      onClick: l.isFunction(n.onClick)
                        ? s.getFunctionBody(n.onClick)
                        : '',
                      onClose: l.isFunction(n.onClose)
                        ? s.getFunctionBody(n.onClose)
                        : ''
                    };
                    void 0 !== n.data &&
                      null !== n.data &&
                      (c = (function(i) {
                        for (var t = 1; t < arguments.length; t++) {
                          var n = null != arguments[t] ? arguments[t] : {},
                            e = Object.keys(n);
                          'function' == typeof Object.getOwnPropertySymbols &&
                            (e = e.concat(
                              Object.getOwnPropertySymbols(n).filter(function(
                                i
                              ) {
                                return Object.getOwnPropertyDescriptor(n, i)
                                  .enumerable;
                              })
                            )),
                            e.forEach(function(t) {
                              o(i, t, n[t]);
                            });
                        }
                        return i;
                      })({}, c, n.data)),
                      e
                        .showNotification(t, {
                          icon: n.icon,
                          body: n.body,
                          vibrate: n.vibrate,
                          tag: n.tag,
                          data: c,
                          requireInteraction: n.requireInteraction,
                          silent: n.silent
                        })
                        .then(function() {
                          e.getNotifications().then(function(i) {
                            e.active.postMessage(''), r(i);
                          });
                        })
                        .catch(function(i) {
                          throw new Error(
                            u.errors.sw_notification_error + i.message
                          );
                        });
                  })
                  .catch(function(i) {
                    throw new Error(u.errors.sw_registration_error + i.message);
                  });
            }
          },
          { key: 'close', value: function() {} }
        ]),
        n
      );
    })(),
    w = (function(i) {
      function n() {
        return t(this, n), a(this, s(n).apply(this, arguments));
      }
      return (
        r(n, h),
        e(n, [
          {
            key: 'isSupported',
            value: function() {
              return void 0 !== this.win.navigator.mozNotification;
            }
          },
          {
            key: 'create',
            value: function(i, t) {
              var n = this.win.navigator.mozNotification.createNotification(
                i,
                t.body,
                t.icon
              );
              return n.show(), n;
            }
          }
        ]),
        n
      );
    })(),
    p = (function(i) {
      function n() {
        return t(this, n), a(this, s(n).apply(this, arguments));
      }
      return (
        r(n, h),
        e(n, [
          {
            key: 'isSupported',
            value: function() {
              return (
                void 0 !== this.win.external &&
                void 0 !== this.win.external.msIsSiteMode
              );
            }
          },
          {
            key: 'create',
            value: function(i, t) {
              return (
                this.win.external.msSiteModeClearIconOverlay(),
                this.win.external.msSiteModeSetIconOverlay(
                  l.isString(t.icon) || l.isUndefined(t.icon)
                    ? t.icon
                    : t.icon.x16,
                  i
                ),
                this.win.external.msSiteModeActivate(),
                null
              );
            }
          },
          {
            key: 'close',
            value: function() {
              this.win.external.msSiteModeClearIconOverlay();
            }
          }
        ]),
        n
      );
    })(),
    y = (function(i) {
      function n() {
        return t(this, n), a(this, s(n).apply(this, arguments));
      }
      return (
        r(n, h),
        e(n, [
          {
            key: 'isSupported',
            value: function() {
              return void 0 !== this.win.webkitNotifications;
            }
          },
          {
            key: 'create',
            value: function(i, t) {
              var n = this.win.webkitNotifications.createNotification(
                t.icon,
                i,
                t.body
              );
              return n.show(), n;
            }
          },
          {
            key: 'close',
            value: function(i) {
              i.cancel();
            }
          }
        ]),
        n
      );
    })();
  return new ((function() {
    function i(n) {
      t(this, i),
        (this._currentId = 0),
        (this._notifications = {}),
        (this._win = n),
        (this.Permission = new f(n)),
        (this._agents = {
          desktop: new v(n),
          chrome: new d(n),
          firefox: new w(n),
          ms: new p(n),
          webkit: new y(n)
        }),
        (this._configuration = {
          serviceWorker: '/serviceWorker.min.js',
          fallback: function(i) {}
        });
    }
    return (
      e(i, [
        {
          key: '_closeNotification',
          value: function(i) {
            var t = !0,
              n = this._notifications[i];
            if (void 0 !== n) {
              if (
                ((t = this._removeNotification(i)),
                this._agents.desktop.isSupported())
              )
                this._agents.desktop.close(n);
              else if (this._agents.webkit.isSupported())
                this._agents.webkit.close(n);
              else {
                if (!this._agents.ms.isSupported())
                  throw ((t = !1), new Error(u.errors.unknown_interface));
                this._agents.ms.close();
              }
              return t;
            }
            return !1;
          }
        },
        {
          key: '_addNotification',
          value: function(i) {
            var t = this._currentId;
            return (this._notifications[t] = i), this._currentId++, t;
          }
        },
        {
          key: '_removeNotification',
          value: function(i) {
            var t = !1;
            return (
              this._notifications.hasOwnProperty(i) &&
                (delete this._notifications[i], (t = !0)),
              t
            );
          }
        },
        {
          key: '_prepareNotification',
          value: function(i, t) {
            var n,
              e = this;
            return (
              (n = {
                get: function() {
                  return e._notifications[i];
                },
                close: function() {
                  e._closeNotification(i);
                }
              }),
              t.timeout &&
                setTimeout(function() {
                  n.close();
                }, t.timeout),
              n
            );
          }
        },
        {
          key: '_serviceWorkerCallback',
          value: function(i, t, n) {
            var e = this,
              o = this._addNotification(i[i.length - 1]);
            navigator &&
              navigator.serviceWorker &&
              (navigator.serviceWorker.addEventListener('message', function(i) {
                var t = JSON.parse(i.data);
                'close' === t.action &&
                  Number.isInteger(t.id) &&
                  e._removeNotification(t.id);
              }),
              n(this._prepareNotification(o, t))),
              n(null);
          }
        },
        {
          key: '_createCallback',
          value: function(i, t, n) {
            var e,
              o = this,
              r = null;
            if (
              ((t = t || {}),
              (e = function(i) {
                o._removeNotification(i),
                  l.isFunction(t.onClose) && t.onClose.call(o, r);
              }),
              this._agents.desktop.isSupported())
            )
              try {
                r = this._agents.desktop.create(i, t);
              } catch (e) {
                var s = this._currentId,
                  c = this.config().serviceWorker;
                this._agents.chrome.isSupported() &&
                  this._agents.chrome.create(s, i, t, c, function(i) {
                    return o._serviceWorkerCallback(i, t, n);
                  });
              }
            else
              this._agents.webkit.isSupported()
                ? (r = this._agents.webkit.create(i, t))
                : this._agents.firefox.isSupported()
                  ? this._agents.firefox.create(i, t)
                  : this._agents.ms.isSupported()
                    ? (r = this._agents.ms.create(i, t))
                    : ((t.title = i), this.config().fallback(t));
            if (null !== r) {
              var a = this._addNotification(r),
                u = this._prepareNotification(a, t);
              l.isFunction(t.onShow) && r.addEventListener('show', t.onShow),
                l.isFunction(t.onError) &&
                  r.addEventListener('error', t.onError),
                l.isFunction(t.onClick) &&
                  r.addEventListener('click', t.onClick),
                r.addEventListener('close', function() {
                  e(a);
                }),
                r.addEventListener('cancel', function() {
                  e(a);
                }),
                n(u);
            }
            n(null);
          }
        },
        {
          key: 'create',
          value: function(i, t) {
            var n,
              e = this;
            if (!l.isString(i)) throw new Error(u.errors.invalid_title);
            return (
              (n = this.Permission.has()
                ? function(n, o) {
                    try {
                      e._createCallback(i, t, n);
                    } catch (i) {
                      o(i);
                    }
                  }
                : function(n, o) {
                    e.Permission.request()
                      .then(function() {
                        e._createCallback(i, t, n);
                      })
                      .catch(function() {
                        o(u.errors.permission_denied);
                      });
                  }),
              new Promise(n)
            );
          }
        },
        {
          key: 'count',
          value: function() {
            var i,
              t = 0;
            for (i in this._notifications)
              this._notifications.hasOwnProperty(i) && t++;
            return t;
          }
        },
        {
          key: 'close',
          value: function(i) {
            var t;
            for (t in this._notifications)
              if (
                this._notifications.hasOwnProperty(t) &&
                this._notifications[t].tag === i
              )
                return this._closeNotification(t);
          }
        },
        {
          key: 'clear',
          value: function() {
            var i,
              t = !0;
            for (i in this._notifications)
              this._notifications.hasOwnProperty(i) &&
                (t = t && this._closeNotification(i));
            return t;
          }
        },
        {
          key: 'supported',
          value: function() {
            var i = !1;
            for (var t in this._agents)
              this._agents.hasOwnProperty(t) &&
                (i = i || this._agents[t].isSupported());
            return i;
          }
        },
        {
          key: 'config',
          value: function(i) {
            return (
              (void 0 !== i || (null !== i && l.isObject(i))) &&
                l.objectMerge(this._configuration, i),
              this._configuration
            );
          }
        },
        {
          key: 'extend',
          value: function(i) {
            var t,
              n = {}.hasOwnProperty;
            if (!n.call(i, 'plugin')) throw new Error(u.errors.invalid_plugin);
            for (var e in (n.call(i, 'config') &&
              l.isObject(i.config) &&
              null !== i.config &&
              this.config(i.config),
            (t = new (0, i.plugin)(this.config()))))
              n.call(t, e) && l.isFunction(t[e]) && (this[e] = t[e]);
          }
        }
      ]),
      i
    );
  })())('undefined' != typeof window ? window : global);
});
>>>>>>> Got build working
//# sourceMappingURL=push.min.js.map
